// Copyright (C) 2021-2022, Marco Wang
//
// Permission is hereby granted, free of charge, to any person obtaining a copy
// of this software and associated documentation files (the "Software"), to deal
// in the Software without restriction, including without limitation the rights
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
// copies of the Software, and to permit persons to whom the Software is
// furnished to do so, subject to the following conditions:
//
// The above copyright notice and this permission notice shall be included in all
// copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
// SOFTWARE.

#include <s2e/Plugins/Requiem/Requiem.h>
#include <s2e/Plugins/Requiem/Utils/Subprocess.h>
#include <s2e/Plugins/Requiem/Utils/StringUtil.h>

#include <sstream>
#include <string>
#include <vector>

#include "Exploit.h"

using namespace klee;
namespace py = pybind11;

namespace s2e::plugins::requiem {

const std::string Exploit::s_shebang = "#!/usr/bin/env python3";

Exploit::Exploit(Requiem &ctx,
                 const std::string &elfFilename,
                 const std::string &libcFilename)
    : m_ctx(ctx),
      m_elfFilename(elfFilename),
      m_libcFilename(libcFilename) ,
      m_outputFilename(format("%s_exploit.py", elfFilename.c_str())),
      m_content(),
      m_gadgets(),
      m_memLocations(),
      m_elf(m_ctx.pwnlib(), elfFilename),
      m_libc(m_ctx.pwnlib(), libcFilename) {}


void Exploit::registerGadget(const std::string &name, uint64_t addr) {
    if (m_gadgets.find(name) != m_gadgets.end()) {
        m_ctx.log<WARN>()
            << "gadget: " << name << " @" << hexval(addr) << " already registered!\n";
    }
    m_gadgets[name] = addr;
}

void Exploit::registerMemLocation(const std::string &name, uint64_t addr) {
    if (m_memLocations.find(name) != m_memLocations.end()) {
        m_ctx.log<WARN>()
            << "memLocation: " << name << " @" << hexval(addr) << " already registered!\n";
    }
    m_memLocations[name] = addr;
}

uint64_t Exploit::resolveGadget(const std::string &assembly) {
    // Get the output of `ROPgadget --binary <m_elfFilename> | grep <assembly>`
    // and store it in `output`.
    subprocess::popen ropGadget("ROPgadget", {"--binary", m_elfFilename});
    ropGadget.close();

    subprocess::popen grep("grep", {assembly});
    grep.stdin() << ropGadget.stdout().rdbuf();
    grep.close();
    std::string output = toString(grep.stdout());

    // Example entry:
    // 0x000000000040117d : pop rbp ; ret
    for (const auto &line : split(output, '\n')) {
        size_t firstSpaceIdx = line.find_first_of(" ");
        size_t asmBeginIdx = firstSpaceIdx + 3;  // skips ": ".

        std::string addrStr = line.substr(0, firstSpaceIdx);
        std::string asmStr = line.substr(asmBeginIdx);

        // Look for an exact match.
        if (asmStr == assembly) {
            uint64_t addr = std::stoull(addrStr, nullptr, 0);
            m_ctx.log<WARN>() << format("Resolved gadget: [0x%x] %s\n", addr, asmStr.c_str());
            return addr;
        }
    }

    m_ctx.log<WARN>() << "Cannot resolve gadget: " << assembly << "\n";
    return 0;
}


void Exploit::writeline(const std::string &line) {
    m_content += line + '\n';
}

void Exploit::writelines(const std::vector<std::string> &lines) {
    m_content += join(lines, '\n') + '\n';
}

}  // namespace s2e::plugins::requiem
